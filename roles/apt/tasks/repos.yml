---
- name: Merge apt_repos and apt_repos_overwrite
  ansible.builtin.set_fact:
    merged_repos: "{{ apt_repos | combine(apt_repos_overwrite) }}"

- name: Ensure parent dirs for APT keys
  become: true
  when:
    - item.value.key.save_to is defined
    - item.value.key.save_to | length > 0
  with_dict: "{{ merged_repos }}"
  loop_control:
    label: "{{ item.key }}"
  ansible.builtin.file:
    state: directory
    path: "{{ item.value.key.save_to | dirname }}"
    owner: root
    mode: "go+r"

- name: Download APT keys
  become: true
  when:
    - item.value.key.download_url is defined
    - item.value.key.download_url | length > 0
    - item.value.key.dearmor is defined
    - item.value.key.dearmor is boolean
  with_dict: "{{ merged_repos }}"
  loop_control:
    label: "{{ item.key }}"
  ansible.builtin.get_url:
    url: "{{ item.value.key.download_url }}"
    # Append '.raw' extension to identify keys that need to be dearmored in the next task
    dest: "{{ item.value.key.save_to }}{{ '.raw' if item.value.key.dearmor }}"
    owner: root
    mode: "go+r"
  register: download_apt_key
  until: download_apt_key is succeeded
  retries: 3
  delay: 3

- name: Dearmor APT keys
  become: true
  when:
    - item.value.key.dearmor is defined
    - item.value.key.dearmor is boolean
  with_dict: "{{ merged_repos }}"
  loop_control:
    label: "{{ item.key }}"
  ansible.builtin.command: gpg --dearmor --output "{{ item.value.key.save_to }}" "{{ item.value.key.save_to }}.raw"
  args:
    creates: "{{ item.value.key.save_to }}"

- name: Add APT sources
  become: true
  with_dict: "{{ merged_repos }}"
  loop_control:
    label: "{{ item.key }}"
  ansible.builtin.apt_repository:
    repo: "{{ item.value.source }}"
    update_cache: false

- name: Update APT cache
  become: true
  ansible.builtin.apt:
    update_cache: true
